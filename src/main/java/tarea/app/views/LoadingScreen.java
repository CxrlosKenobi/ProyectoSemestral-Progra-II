package tarea.app.views;

public class LoadingScreen extends javax.swing.JFrame {

    /**
     * Creates new form mainScreen
     *
     * @param name
     */
    public LoadingScreen(String name) {
        super(name);
        setUndecorated(true);
        initComponents();
        setLocationRelativeTo(null);
        setVisible(true);
        playApp();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        LoadingScreen = new javax.swing.JPanel();
        ProgramTitle = new javax.swing.JLabel();
        LoadingBar = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        LoadingScreen.setBackground(new java.awt.Color(16, 24, 32));

        ProgramTitle.setFont(new java.awt.Font("Military Poster", 0, 48)); // NOI18N
        ProgramTitle.setForeground(new java.awt.Color(254, 231, 21));
        ProgramTitle.setText("Missile Launch System");

        LoadingBar.setForeground(new java.awt.Color(254, 231, 21));

        jLabel1.setForeground(new java.awt.Color(254, 231, 21));
        jLabel1.setText("Loading  ...");

        javax.swing.GroupLayout LoadingScreenLayout = new javax.swing.GroupLayout(LoadingScreen);
        LoadingScreen.setLayout(LoadingScreenLayout);
        LoadingScreenLayout.setHorizontalGroup(
                LoadingScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(LoadingScreenLayout.createSequentialGroup()
                                .addGroup(LoadingScreenLayout
                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(LoadingScreenLayout.createSequentialGroup()
                                                .addGap(452, 452, 452)
                                                .addComponent(ProgramTitle))
                                        .addGroup(LoadingScreenLayout.createSequentialGroup()
                                                .addGap(305, 305, 305)
                                                .addGroup(LoadingScreenLayout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                436, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(LoadingBar,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE, 664,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(305, 305, 305)));
        LoadingScreenLayout.setVerticalGroup(
                LoadingScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(LoadingScreenLayout.createSequentialGroup()
                                .addGap(332, 332, 332)
                                .addComponent(ProgramTitle)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(LoadingBar, javax.swing.GroupLayout.PREFERRED_SIZE, 12,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel1)
                                .addContainerGap(280, Short.MAX_VALUE)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(LoadingScreen, javax.swing.GroupLayout.DEFAULT_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(LoadingScreen, javax.swing.GroupLayout.DEFAULT_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));

        pack();
    }// </editor-fold>

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        
        // </editor-fold>
        // </editor-fold>
        /* Create and display the form */
        // </editor-fold>

        // </editor-fold>

        /* Create and display the form */
        LoadingScreen ms = new LoadingScreen("Sistema");
        ms.setLocationRelativeTo(null);
        ms.setVisible(true);

        try {
            for (int i = 0; i <= 100; i++) {
                Thread.sleep(100);
                switch (i) {
                    case (10) -> {
                        ms.jLabel1.setText("Loading trigonometry...");
                        break;
                    }
                    case (20) -> {
                        ms.jLabel1.setText("Loading nuclear bombs...");
                        break;
                    }
                    case (30) -> {
                        ms.jLabel1.setText("Loading guns...");
                        break;
                    }
                    case (40) -> {
                        ms.jLabel1.setText("Loading secret features...");
                        break;
                    }
                    case (50) -> {
                        ms.jLabel1.setText("Loading easter eggs...");
                        break;
                    }
                    case (60) -> {
                        ms.jLabel1.setText("Loading funny quotes...");
                        break;
                    }
                    case (70) -> {
                        ms.jLabel1.setText("Loading databases...");
                        break;
                    }
                    case (80) -> {
                        ms.jLabel1.setText("Loading secret information...");
                        break;
                    }
                    case (90) -> {
                        ms.jLabel1.setText("Loading declassified CIA documents...");
                        break;
                    }
                    case (100) -> {
                        ms.jLabel1.setText("Loaded!");
                        ms.LoadingScreen.setVisible(false);
                        ms.dispose();
                        break;

                    }
                }
                ms.LoadingBar.setValue(i);

            }
        } catch (InterruptedException e) {
            System.out.println(e);
        }

    }

    private void playApp() {
        try {
            for (int i = 0; i <= 100; i++) {
                Thread.sleep(100);
                switch (i) {
                    case (10) -> {
                        this.jLabel1.setText("Loading trigonometry...");
                        break;
                    }
                    case (20) -> {
                        this.jLabel1.setText("Loading nuclear bombs...");
                        break;
                    }
                    case (30) -> {
                        this.jLabel1.setText("Loading guns...");
                        break;
                    }
                    case (40) -> {
                        this.jLabel1.setText("Loading secret features...");
                        break;
                    }
                    case (50) -> {
                        this.jLabel1.setText("Loading easter eggs...");
                        break;
                    }
                    case (60) -> {
                        this.jLabel1.setText("Loading funny quotes...");
                        break;
                    }
                    case (70) -> {
                        this.jLabel1.setText("Loading databases...");
                        break;
                    }
                    case (80) -> {
                        this.jLabel1.setText("Loading secret information...");
                        break;
                    }
                    case (90) -> {
                        this.jLabel1.setText("Loading declassified CIA documents...");
                        break;
                    }
                    case (100) -> {
                        this.jLabel1.setText("Loaded!");
                        this.LoadingScreen.setVisible(false);
                        this.dispose();
                        break;

                    }
                }
                this.LoadingBar.setValue(i);

            }
        } catch (InterruptedException e) {
            System.out.println(e);
        }

    }

    // Variables declaration - do not modify
    private javax.swing.JProgressBar LoadingBar;
    private javax.swing.JPanel LoadingScreen;
    private javax.swing.JLabel ProgramTitle;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration
}